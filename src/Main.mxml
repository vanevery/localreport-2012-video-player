<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   applicationComplete="init()">
		
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import flash.events.*;
			import flash.net.*;
			
			public static const PLAYLIST_URL:String = "http://live.whitmanlocalreport.net:8080/playlist.php";
			public static const VIDEO_FILE_BASE_URL:String = "http://live.whitmanlocalreport.net:8080/videouploads/";
			
			public static const VIDEO_WIDTH:Number = 80;
			public static const VIDEO_HEIGHT:Number = 60;
			
			private var netConnection:NetConnection;
			private var netStream:NetStream;
			private var video:Video;
			private var streamName:String;
			
			private var currentVideoIndex:Number = -1;
			private var playlist:Array = new Array();
			private var playlistTimer:Timer;
			private var playlistRequestPending:Boolean = false;
			
			private var currentVideoMetadata:Object;
			private var currentVideoPlayTimer:Timer;
			
			public static const INIT:Number = 0;
			public static const PLAYING:Number = 1;
			public static const WAITING:Number = 2;
			private var playState:Number = INIT;
			
			// Declare the URL Loader
			private var urlLoader:URLLoader;
			
			// Declare the request
			private var urlRequest:URLRequest;
			
			
			// Runs at launch
			private function init():void
			{
				trace("init");
				
				netConnection = new NetConnection();
				netConnection.connect(null);
				netStream = new NetStream(netConnection);
				netStream.client = this;
				video = new Video();
				video.x = 0;
				video.y = 0;
				video.width = VIDEO_WIDTH;
				video.height = VIDEO_HEIGHT;
				video.attachNetStream(netStream);
				uic.addChild(video);
				
				currentVideoPlayTimer = new Timer(500,0);
				currentVideoPlayTimer.addEventListener(TimerEvent.TIMER, checkPlayback);				
				
				playlistTimer = new Timer(1000,0);
				playlistTimer.addEventListener(TimerEvent.TIMER, playlistTimerFired);
				requestPlaylist();
				playlistTimer.start();
			}
			
			public function onMetaData(infoObject:Object):void {
				trace("metadata");
				currentVideoMetadata = infoObject;
				video.width = infoObject.width;
				video.height = infoObject.height;
				
				currentVideoPlayTimer.start();
				/*
				var key:String;
				for(key in infoObject){
					trace(key+": "+infoObject[key]);
				}
				*/
			}

			public function checkPlayback(e:TimerEvent):void {
				trace("Checking playback");
				if (netStream.time >= currentVideoMetadata.duration - .1) {
					trace("Video Done");
					currentVideoPlayTimer.stop();
					playNextVideo();
				}
			}
			
			private function netStatusHandler(event : NetStatusEvent) : void {
				trace(event.info.code);
				switch(event.info.code) {
					case "NetConnection.Connect.Success":
						trace("Loaded stream");
						break;
					case "NetStream.Play.StreamNotFound":
						trace("Stream not found");
						break;
					case "NetStream.Play.Stop":
						trace("Stream stopped");
						break;
					default:
				}
			}
			
			public function playlistTimerFired(e:TimerEvent):void
			{
				if (playState == WAITING && !playlistRequestPending) {
					requestPlaylist();
				}
			}
			
			private function requestPlaylist():void
			{
				playlistRequestPending = true;
				
				// Instantiate Loader				
				urlLoader = new URLLoader();
				
				// Register the function that will receive the content
				urlLoader.addEventListener(Event.COMPLETE, playlistLoaded);
				
				// Create the request
				var videoId:Number = -1;
				if (currentVideoIndex >= 0) {
					videoId = playlist[currentVideoIndex].video_id;
				}
				urlRequest = new URLRequest(PLAYLIST_URL + "?last_video_id=" + videoId);

				// Make the request
				try {
					urlLoader.load(urlRequest);
				} catch (error:Error) {
					trace("Unable to load requested document.");
				}		
				trace("Should have loaded");
			}
			
			public function playlistLoaded(event:Event):void
			{
				trace("Loaded: " + urlLoader.data);            
				
				// Parse the playlist
				/*
				[
				{"video_id":"1","video_file":"1344265332_2195_videocapture95696484.3gp","video_ts":"2012-08-06 15:02:12","participant_id":"1","performance_id":"1"},
				{"video_id":"2","video_file":"1344265335_5541_videocapture95696484.3gp","video_ts":"2012-08-06 15:02:15","participant_id":"1","performance_id":"1"},
				{"video_id":"3","video_file":"1344265349_3194_videocapture95696484.3gp","video_ts":"2012-08-06 15:02:29","participant_id":"1","performance_id":"1"}
				]				
				*/
				var newPlaylist:Array = (JSON.decode(urlLoader.data) as Array);
				if (newPlaylist != null) {
					for(var i:int = 0; i < newPlaylist.length; i++) {
						trace(newPlaylist[i].video_id);
						playlist.push(newPlaylist[i]);
					}
				}

				for(var j:int = 0; j < playlist.length; j++) {
					trace(playlist[j].video_id);
				}
				
				if (playState != PLAYING) {
					playNextVideo();
				}
				
				playlistRequestPending = false;
			}	
			
			private function playNextVideo():void {
				if (currentVideoIndex < (playlist.length - 2)) {
					currentVideoIndex++;
					trace("Going to play: " + VIDEO_FILE_BASE_URL + playlist[currentVideoIndex].video_file);
					netStream.play(VIDEO_FILE_BASE_URL + playlist[currentVideoIndex].video_file);
				} else {
					trace("Waiting for more videos");
					playState = WAITING;
				}
			}
			
		]]>
	</fx:Script>
	
	<mx:UIComponent id="uic" />
			
</s:WindowedApplication>
